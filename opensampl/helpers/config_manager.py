"""Configuration management for openSAMPL systemd service."""

import os
import shutil
import subprocess
from pathlib import Path
from typing import Optional

from loguru import logger

from opensampl.constants import ENV_VARS


class ConfigManager:
    """Manages configuration for openSAMPL systemd service."""

    def __init__(self):
        self.user_config_dir = ENV_VARS.SYSTEMD_USER_CONFIG_DIR.get_value()
        self.system_config_dir = ENV_VARS.SYSTEMD_CONFIG_DIR.get_value()
        self.config_file = "config"

    def get_config_path(self) -> Path:
        """Get the active configuration file path."""
        # Check if user config exists, otherwise use system config
        user_config = self.user_config_dir / self.config_file
        if user_config.exists():
            return user_config
        
        # Try to use system config, but fall back to user config if not accessible
        system_config = self.system_config_dir / self.config_file
        if system_config.exists():
            return system_config
        
        # Default to user config directory if system directory is not accessible
        try:
            # Test if we can write to system directory
            test_file = self.system_config_dir / ".test_write"
            test_file.parent.mkdir(parents=True, exist_ok=True)
            test_file.touch()
            test_file.unlink()
            return system_config
        except (PermissionError, OSError):
            # Fall back to user config directory
            return user_config

    def read_config(self) -> dict[str, str]:
        """Read configuration from the active config file."""
        config_path = self.get_config_path()
        config = {}
        
        if config_path.exists():
            try:
                with open(config_path, "r") as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith("#"):
                            if "=" in line:
                                key, value = line.split("=", 1)
                                config[key.strip()] = value.strip()
            except Exception as e:
                logger.warning(f"Failed to read config file {config_path}: {e}")
        
        return config

    def write_config(self, config: dict[str, str]) -> None:
        """Write configuration to the active config file."""
        config_path = self.get_config_path()
        
        # Ensure directory exists
        config_path.parent.mkdir(parents=True, exist_ok=True)
        
        try:
            with open(config_path, "w") as f:
                f.write("# openSAMPL Configuration\n")
                f.write("# This file is automatically generated\n\n")
                for key, value in config.items():
                    f.write(f"{key}={value}\n")
        except Exception as e:
            logger.error(f"Failed to write config file {config_path}: {e}")
            raise

    def set_config_value(self, key: str, value: str) -> None:
        """Set a single configuration value."""
        config = self.read_config()
        config[key] = value
        self.write_config(config)

    def get_config_value(self, key: str) -> Optional[str]:
        """Get a single configuration value."""
        config = self.read_config()
        return config.get(key)

    def create_systemd_service(self, service_name: str, user: str, working_dir: Path) -> str:
        """Create systemd service content."""
        service_content = f"""[Unit]
Description=openSAMPL Data Processing Service
After=network.target

[Service]
Type=simple
User={user}
WorkingDirectory={working_dir}
ExecStart=/usr/bin/env opensampl-server up
ExecStop=/usr/bin/env opensampl-server down
Restart=always
RestartSec=10
Environment=SYSTEMD_CONFIG_DIR={self.system_config_dir}

[Install]
WantedBy=multi-user.target
"""
        return service_content

    def install_systemd_service(self, service_name: str, user: str, working_dir: Path) -> bool:
        """Install the systemd service."""
        try:
            # Check if running as root
            if os.geteuid() != 0:
                logger.error("This command must be run with sudo privileges")
                return False

            # Create service content
            service_content = self.create_systemd_service(service_name, user, working_dir)
            
            # Write service file
            service_file = Path(f"/etc/systemd/system/{service_name}.service")
            service_file.write_text(service_content)
            
            # Create working directory
            working_dir.mkdir(parents=True, exist_ok=True)
            
            # Set ownership
            if user != "root":
                try:
                    shutil.chown(working_dir, user=user, group=user)
                except LookupError:
                    logger.warning(f"User '{user}' not found, using current user")
                    # Use current user if specified user doesn't exist
                    import pwd
                    current_user = pwd.getpwuid(os.getuid()).pw_name
                    shutil.chown(working_dir, user=current_user, group=current_user)
            
            # Reload systemd
            subprocess.run(["systemctl", "daemon-reload"], check=True)
            
            # Enable service
            subprocess.run(["systemctl", "enable", f"{service_name}.service"], check=True)
            
            logger.info(f"Systemd service '{service_name}' installed and enabled successfully")
            logger.info(f"Working directory: {working_dir}")
            logger.info(f"Configuration directory: {self.get_config_path()}")
            logger.info("Use 'systemctl start opensampl' to start the service")
            
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"Failed to install systemd service: {e}")
            return False
        except Exception as e:
            logger.error(f"Unexpected error installing systemd service: {e}")
            return False

    def uninstall_systemd_service(self, service_name: str) -> bool:
        """Uninstall the systemd service."""
        try:
            # Check if running as root
            if os.geteuid() != 0:
                logger.error("This command must be run with sudo privileges")
                return False

            # Stop and disable service
            subprocess.run(["systemctl", "stop", f"{service_name}.service"], check=False)
            subprocess.run(["systemctl", "disable", f"{service_name}.service"], check=False)
            
            # Remove service file
            service_file = Path(f"/etc/systemd/system/{service_name}.service")
            if service_file.exists():
                service_file.unlink()
            
            # Reload systemd
            subprocess.run(["systemctl", "daemon-reload"], check=True)
            
            logger.info(f"Systemd service '{service_name}' uninstalled successfully")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"Failed to uninstall systemd service: {e}")
            return False
        except Exception as e:
            logger.error(f"Unexpected error uninstalling systemd service: {e}")
            return False 